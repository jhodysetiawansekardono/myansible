---
- hosts: all
  tags: install-depedencies
  vars_files:
  - vars.yaml
  tasks:
  - name: Update hosts file
    blockinfile:
      path: /etc/hosts
      block: |
        {{ K8S_VIP }} {{ K8S_API }}
        {% for host in groups['all'] %}
        {{ hostvars[host].ansible_host }} {{ hostvars[host].ansible_hostname }} {{ host }}
        {% endfor %}
  - name: Install depedency
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: present
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - nfs-common
      - glusterfs-client
  - name: Load required docker modules
    copy:
      dest: /etc/modules-load.d/docker.conf
      content: |
        overlay
        br_netfilter
  - name: Load required sysctl parameters
    copy:
      dest: /etc/sysctl.d/99-kubernetes-cri.conf
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
  - name: Apply modules and parameters
    shell: |
      modprobe overlay
      modprobe br_netfilter
      sysctl --system
  - name: Set DPKG architecture
    set_fact:
      dpkg_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
  - name: Add docker apt signing key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add docker apt repository
    apt_repository:
      repo: deb [arch={{ dpkg_arch }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      state: present
      filename: docker
  - name: Install docker
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - docker-ce=5:20.10.14~3-0~ubuntu-{{ ansible_distribution_release }}
        - docker-ce-cli=5:20.10.14~3-0~ubuntu-{{ ansible_distribution_release }}
        - containerd.io=1.5.11-1
  - name: Create Docker directories
    file:
      path: /etc/docker
      state: directory
  - name: Configuring Docker
    copy:
      dest: /etc/docker/daemon.json
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
          "max-size": "100m"
        },
          "storage-driver": "overlay2"
        }
  - name: Enable Docker service
    systemd:
      name: docker
      enabled: yes
  - name: Reloading Docker service
    systemd:
      name: docker
      daemon_reload: yes
  - name: Restarting Docker service
    systemd:
      name: docker
      state: restarted
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  - name: Add kubernetes apt signing key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: Add kubernetes apt repository
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list
  - name: Install kubernetes packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.20.12-00
        - kubeadm=1.20.12-00
        - kubectl=1.20.12-00
  - name: Disable auto update of kubernetes packages
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - kubelet
      - kubeadm
      - kubectl
      - containerd.io
      - docker-ce
      - docker-ce-cli

- hosts: masters
  tags: create-loadbalancer
  tasks:
  - name: Install loadbalancer packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: present
    vars:
      packages:
      - haproxy
      - keepalived
  - name: Disable auto updates for loadbalancer packages
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - haproxy
      - keepalived
  - name: Create group for health check
    group:
      name: keepalived_script
      state: present
      system: true
  - name: Create user for executing health check scripts
    user:
      name: keepalived_script
      group: keepalived_script
      system: true
      create_home: false
      shell: /sbin/nologin
  - name: Create script for health check
    copy:
      src: ../inventory/check_apiserver.sh.j2
      dest: /etc/keepalived/check_apiserver.sh
      mode: 0755
  - name: Configuring loadbalancer
    copy:
      src: ../inventory/haproxy.cfg
      dest: /etc/haproxy/haproxy.cfg
  - name: Apply loadbalancer configuration
    systemd:
      name: haproxy
      state: restarted

- hosts: masters
  tags: create-keepalived
  vars_files:
  - vars.yaml
  tasks:
  - name: Debug Keepalived Variables
    debug:
      var: hostvars[masters].KEEPALIVED_STATE
  - name: Debug Keepalived Variables
    debug:
      var: hostvars[masters].KEEPALIVED_PRIORITY
  - name: Debug Keepalived Variables
    debug:
      var: K8S_VIP
  - name: Debug Keepalived Variables
    debug:
      var: K8S_API
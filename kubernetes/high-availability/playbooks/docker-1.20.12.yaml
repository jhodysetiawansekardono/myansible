---
- hosts: all
  tags: install-depedencies
  tasks:
  - name: Update hosts file
    blockinfile:
      path: /etc/hosts
      block: |
        K8S_VIP K8S_API
        {% for host in groups['all'] %}
        {{ hostvars[host].ansible_host }} {{ hostvars[host].ansible_hostname }} {{ host }}
        {% endfor %}
  - name: Install depedency
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: present
    vars:
      packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - nfs-common
  - name: Load required docker modules
    copy:
      dest: /etc/modules-load.d/docker.conf
      content: |
        overlay
        br_netfilter
  - name: Load required sysctl parameters
    copy:
      dest: /etc/sysctl.d/99-kubernetes-cri.conf
      content: |
        net.bridge.bridge-nf-call-iptables  = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        net.ipv4.ip_forward                 = 1
  - name: Apply modules and parameters
    shell: |
      modprobe overlay
      modprobe br_netfilter
      sysctl --system
  - name: Set DPKG architecture
    set_fact:
      dpkg_arch: "{{ 'amd64' if ansible_architecture == 'x86_64' else ansible_architecture }}"
  - name: Add docker apt signing key
    apt_key:
      url: https://download.docker.com/linux/ubuntu/gpg
      state: present
  - name: Add docker apt repository
    apt_repository:
      repo: deb [arch={{ dpkg_arch }}] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable
      state: present
      filename: docker
  - name: Install docker
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - docker-ce=5:20.10.14~3-0~ubuntu-{{ ansible_distribution_release }}
        - docker-ce-cli=5:20.10.14~3-0~ubuntu-{{ ansible_distribution_release }}
        - containerd.io=1.5.11-1
  - name: Create Docker directories
    file:
      path: /etc/docker
      state: directory
  - name: Configuring Docker
    copy:
      dest: /etc/docker/daemon.json
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
          "max-size": "100m"
        },
          "storage-driver": "overlay2"
        }
  - name: Enable Docker service
    systemd:
      name: docker
      enabled: yes
  - name: Reloading Docker service
    systemd:
      name: docker
      daemon_reload: yes
  - name: Restarting Docker service
    systemd:
      name: docker
      state: restarted
  - name: Remove swapfile from /etc/fstab
    mount:
      name: "{{ item }}"
      fstype: swap
      state: absent
    with_items:
      - swap
      - none
  - name: Disable swap
    command: swapoff -a
    when: ansible_swaptotal_mb > 0
  - name: Add kubernetes apt signing key
    apt_key:
      url: https://packages.cloud.google.com/apt/doc/apt-key.gpg
      state: present
  - name: Add kubernetes apt repository
    apt_repository:
      repo: deb https://apt.kubernetes.io/ kubernetes-xenial main
      state: present
      filename: kubernetes.list
  - name: Install kubernetes packages
    apt:
      name: "{{ packages }}"
      state: present
      update_cache: yes
    vars:
      packages:
        - kubelet=1.20.12-00
        - kubeadm=1.20.12-00
        - kubectl=1.20.12-00
  - name: Disable auto update of kubernetes packages
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - kubelet
      - kubeadm
      - kubectl
      - containerd

- hosts: masters
  tags: create-loadbalancer
  tasks:
  - name: Install loadbalancer packages
    apt:
      name: "{{ packages }}"
      update_cache: yes
      state: present
    vars:
      packages:
      - haproxy
      - keepalived
  - name: Disable auto updates for loadbalancer packages
    dpkg_selections:
      name: "{{ item }}"
      selection: hold
    loop:
      - haproxy
      - keepalived
  - name: Create group for health check
    group:
      name: keepalived_script
      state: present
      system: true
  - name: Create user for executing health check scripts
    user:
      name: keepalived_script
      group: keepalived_script
      system: true
      create_home: false
      shell: /sbin/nologin
  - name: Create script for health check
    copy:
      src: ../loadbalancer/check_apiserver.sh
      dest: /etc/keepalived/check_apiserver.sh
      mode: 0755
  - name: Configuring loadbalancer
    copy:
      src: ../loadbalancer/haproxy.cfg
      dest: /etc/haproxy/haproxy.cfg
  - name: Apply loadbalancer configuration
    systemd:
      name: haproxy
      state: restarted

- hosts: master001
  tags: create-loadbalancer
  tasks:
  - name: Create Keepalived configuration for master001
    copy:
      src: ../loadbalancer/keepalived-master001.conf
      dest: /etc/keepalived/keepalived.conf
  - name: Apply keepalived configuration
    systemd:
      name: keepalived
      state: restarted

- hosts: master002
  tags: create-loadbalancer
  tasks:
  - name: Create Keepalived configuration for master002
    copy:
      src: ../loadbalancer/keepalived-master002.conf
      dest: /etc/keepalived/keepalived.conf
  - name: Apply keepalived configuration
    systemd:
      name: keepalived
      state: restarted

- hosts: master003
  tags: create-loadbalancer
  tasks:
  - name: Create Keepalived configuration for master002
    copy:
      src: ../loadbalancer/keepalived-master003.conf
      dest: /etc/keepalived/keepalived.conf
  - name: Apply keepalived configuration
    systemd:
      name: keepalived
      state: restarted

- hosts: master001
  tags: bootstrap-cluster
  tasks:
  - name: Creating kubeadm config file
    copy:
      src: ../manifests/kubeadm/kubernetes-1.20.12.yaml
      dest: /root/kubeadm-config.yaml
  - name: Initialize the first control plane
    shell: kubeadm init --config /root/kubeadm-config.yaml
  - name: Configure kubelet
    shell: sed -i 's/6443/8443/g' /etc/kubernetes/admin.conf /etc/kubernetes/kubelet.conf
  - name: Apply CNI calico
    shell: |
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config
      chown $(id -u):$(id -g) /root/.kube/config
      kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml
  - name: Configure kubernetes cluster to use haproxy frontend port
    shell: |
      kubectl -n kube-system get configmap kubeadm-config -o jsonpath='{.data.ClusterConfiguration}' > /root/kubeadm-config.yaml
      sed -i 's/6443/8443/g' /root/kubeadm-config.yaml
      kubeadm init phase upload-config kubeadm --config /root/kubeadm-config.yaml
      kubectl -n kube-system get cm kube-proxy -o yaml > /root/kube-proxy.yaml
      sed -i 's/6443/8443/g' /root/kube-proxy.yaml
      kubectl apply -f /root/kube-proxy.yaml
      kubectl -n kube-system rollout restart ds kube-proxy
      kubectl -n kube-system rollout status ds kube-proxy
      kubectl -n kube-public get cm cluster-info -o yaml > /root/cluster-info.yaml
      sed -i 's/6443/8443/g' /root/cluster-info.yaml
      kubectl apply -f /root/cluster-info.yaml
  - name: Generate join command for control-plane
    shell: echo "$(kubeadm token create --print-join-command) --control-plane --certificate-key $(kubeadm init phase upload-certs --upload-certs | grep -vw -e certificate -e Namespace)"
    register: join_command_controller
  - name: Copy join command for control-plane to local file
    local_action: copy content="{{ join_command_controller.stdout_lines[0] }}" dest="./join-command-controller"
  - name: Generate join command for workers
    command: kubeadm token create --print-join-command
    register: join_command_workers
  - name: Copy join command for workers to local file
    local_action: copy content="{{ join_command_workers.stdout_lines[0] }}" dest="./join-command-workers"

- hosts: master002
  tags: bootstrap-cluster
  tasks:
  - name: Copy the join command to control plane
    copy:
      mode: 0777
      src: join-command-controller
      dest: /tmp/join-command.sh
  - name: Join the control plane node to cluster
    command: sh /tmp/join-command.sh
  - name: Copy kubeconfig
    shell: |
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config
      chown $(id -u):$(id -g) /root/.kube/config

- hosts: master003
  tags: bootstrap-cluster
  tasks:
  - name: Copy the join command to control plane
    copy:
      mode: 0777
      src: join-command-controller
      dest: /tmp/join-command.sh
  - name: Join the control plane node to cluster
    command: sh /tmp/join-command.sh
  - name: Copy kubeconfig
    shell: |
      mkdir -p /root/.kube
      cp -i /etc/kubernetes/admin.conf /root/.kube/config
      chown $(id -u):$(id -g) /root/.kube/config

- hosts: workers
  tags: bootstrap-cluster
  tasks:
  - name: Copy the join command to workers
    copy:
      mode: 0777
      src: join-command-workers
      dest: /tmp/join-command.sh
  - name: Join the workers node to cluster
    command: sh /tmp/join-command.sh

- hosts: master001
  tags: bootstrap-cluster
  tasks:
  - name: Labeling worker nodes
    shell: for hosts in $(kubectl get nodes | grep worker | awk '{print$1}'); do kubectl label nodes $hosts type=app; kubectl label nodes $hosts node-role.kubernetes.io/worker=; done

- hosts: master001
  tags:
    - deploy-addons
    - addons-metallb
  tasks:
  - name: Confirm if you want to create metallb
    pause:
      prompt: "Do you want to create metallb? (yes/no)"
    register: create_metallb
  - name: Apply metallb manifest
    shell: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.13.5/config/manifests/metallb-native.yaml
    when: create_metallb.user_input | bool
  - name: Waiting metallb controller ready
    pause:
      echo: yes
      minutes: 2
    when: create_metallb.user_input | bool
  - name: Create metallb configuration
    copy:
      src: ../manifests/metallb/metallb-config.yaml
      dest: /root/metallb-config.yaml
    when: create_metallb.user_input | bool
  - name: Apply metallb configuration
    shell: kubectl create -f /root/metallb-config.yaml
    when: create_metallb.user_input | bool

- hosts: master001
  tags:
    - deploy-addons
    - addons-dashboard
  tasks:
  - name: Confirm if you want to create k8s dashboard
    pause:
      prompt: "Do you want to create kubernetes dashboard? (yes/no)"
    register: create_kubernetes_dashboard
  - name: Apply k8s dashboard manifest
    shell: kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
    when: create_kubernetes_dashboard.user_input | bool
  - name: Create k8s dashboard config file
    copy:
      src: '{{item}}'
      dest: /root/
    loop:
      - ../manifests/dashboard/dashboard-account.yaml
      - ../scripts/kubeconfig-dashboard.sh
    when: create_kubernetes_dashboard.user_input | bool
  - name: Creating user and kubeconfig for kubernetes dashboard
    shell: |
      kubectl apply -f /root/dashboard-account.yaml
      bash /root/kubeconfig-dashboard.sh
    when: create_kubernetes_dashboard.user_input | bool
  - name: Need loadbalancer for k8s dashboard?
    pause:
      prompt: "Do you want to create loadbalancer for k8s dashboard? (yes/no)"
    register: create_lb_ingress_controller
  - name: Creating loadbalancer for k8s dashboard
    shell: |
      kubectl -n kubernetes-dashboard get svc kubernetes-dashboard -o yaml > /root/kubernetes-dashboard-svc.yaml
      sed -i 's+ClusterIP+LoadBalancer+g' /root/kubernetes-dashboard-svc.yaml
      kubectl apply -f /root/kubernetes-dashboard-svc.yaml
    when: create_lb_ingress_controller.user_input | bool

- hosts: master001
  tags:
    - deploy-addons
    - addons-ingress
  tasks:
  - name: Confirm if you want to create nginx ingress controller
    pause:
      prompt: "Do you want to create nginx ingress controller? (yes/no)"
    register: create_ingress_controller
  - name: Apply nginx ingress manifest
    shell: |
      kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/main/deploy/static/provider/baremetal/deploy.yaml
      kubectl -n ingress-nginx scale deployment ingress-nginx-controller --replicas=3
    when: create_ingress_controller.user_input | bool
  - name: Confirm if you want to create loadbalancer for ingress controller
    pause:
      prompt: "Do you want to create loadbalancer for ingress controller? (yes/no)"
    register: create_lb_ingress_controller
  - name: Creating loadbalancer for ingress controller
    shell: |
      kubectl -n ingress-nginx get svc ingress-nginx-controller -o yaml > /root/ingress-nginx-svc.yaml
      sed -i 's+NodePort+LoadBalancer+g' /root/ingress-nginx-svc.yaml
      kubectl apply -f /root/ingress-nginx-svc.yaml
    when: create_lb_ingress_controller.user_input | bool

- hosts: master001
  tags: cleanup
  tasks:
  - name: Cleaning manifest
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - /root/cluster-info.yaml
      - /root/kube-proxy.yaml
      - /root/kubeadm-config.yaml
      - /root/metallb-config.yaml
      - /root/ingress-nginx-svc.yaml
      - /root/kubernetes-dashboard-svc.yaml
      - /root/dashboard-account.yaml
      - /root/kubeconfig-dashboard.sh

- hosts: localhost
  connection: local
  tags: cleanup
  tasks:
  - name: Removing join command
    file:
      path: "{{ item }}"
      state: absent
    with_items:
      - join-command-controller
      - join-command-workers
